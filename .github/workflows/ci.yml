name: CI

on:
  push:
  pull_request:

jobs:
  backend:
    name: Backend
    runs-on: ubuntu-18.04
    strategy:
      # TODO: [ci] should be true if GitHub Actions supports ""allow failures" on matrix
      fail-fast: false
      matrix:
        rust:
          - stable
          - beta
          - nightly

    env:
      CARGO_INCREMENTAL: 0
      RUSTFLAGS: "-C debuginfo=0 -D warnings"

    steps:
      - uses: actions/checkout@v2-beta

      - name: Cleanup pre-installed Rust toolchains
        # The pre-installed toolchain is under root permission, and this would
        # make tarball fail to extract. Here we remove the symlink and install
        # our own Rust toolchain if necessary.
        run: |
          which rustup
          which cargo
          if [[ -L "$HOME/.cargo" && -L "$HOME/.rustup" ]]; then
              rm -v "$HOME/.rustup"
              rm -v "$HOME/.cargo"
          fi
          echo "::add-path::$HOME/.cargo/bin"

      - name: Cache rustup
        uses: actions/cache@v1
        with:
          path: ~/.rustup
          key: ${{ runner.os }}-rustup2-${{ matrix.rust }}-${{ hashFiles('**/Cargo.toml') }}
          restore-key: |
            ${{ runner.os }}-rustup2-${{ matrix.rust }}-

      - name: Cache cargo binaries
        uses: actions/cache@v1
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-bin-${{ matrix.rust }}-${{ hashFiles('**/Cargo.toml') }}
          restore-key: |
            ${{ runner.os }}-cargo-bin-${{ matrix.rust }}-

      - name: Cache cargo registry cache
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry/cache
          key: ${{ runner.os }}-cargo-registry-cache-${{ matrix.rust }}-${{ hashFiles('**/Cargo.toml') }}
          restore-key: |
            ${{ runner.os }}-cargo-registry-cache-${{ matrix.rust }}-
            ${{ runner.os }}-cargo-registry-cache-

      - name: Cache cargo registry index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry/index
          key: ${{ runner.os }}-cargo-registry-index-${{ github.ref }}-${{ github.sha }}
          restore-key: |
            ${{ runner.os }}-cargo-registry-index-${{ github.ref }}-
            ${{ runner.os }}-cargo-registry-index-refs/heads/master-

      - name: Cache cargo git db
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git/db
          key: ${{ runner.os }}-cargo-git-db-${{ github.ref }}-${{ hashFiles('**/Cargo.toml') }}
          restore-key: |
            ${{ runner.os }}-cargo-git-db-${{ github.ref }}-
            ${{ runner.os }}-cargo-git-db-refs/heads/master-

      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ matrix.rust }}-${{ github.ref }}-${{ hashFiles('**/Cargo.toml') }}
          restore-key: |
            ${{ runner.os }}-cargo-build-target-${{ matrix.rust }}-${{ github.ref }}-
            ${{ runner.os }}-cargo-build-target-${{ matrix.rust }}-refs/heads/master-

      - name: Install ${{ matrix.rust }} Rust
        run: |
          if [[ ! -d "$HOME/.cargo" || ! -d "$HOME/.rustup" ]]; then
              curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > rustup-init.sh
              sh rustup-init.sh -y --default-toolchain none
          fi
          rustup set profile minimal
          rustup update ${{ matrix.rust }}
          rustup default ${{ matrix.rust }}

      - name: Install lint tools
        if: matrix.rust == 'stable'
        run: |
          rustup component add rustfmt
          rustup component add clippy

      - name: Cargo clean on new rustc version
        run: script/ci/cargo-clean-on-new-rustc-version.sh

      - name: Lint
        if: matrix.rust == 'stable'
        run: |
          cargo fmt -- --check
          cargo clippy --all-targets --all-features --all

      - name: Test
        run: cargo test
